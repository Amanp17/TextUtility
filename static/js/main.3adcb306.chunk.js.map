{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","DarkMode","LightMode","TextForm","useState","text","setText","count","split","filter","e","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","newText","toUpperCase","showAlert","toLowerCase","copytext","navigator","clipboard","writeText","join","defaultProps","abouttext","Alert","height","alert","word","lower","charAt","slice","capatalize","message","App","setMode","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3adcb306.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n      <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/*<li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">{props.abouttext}</Link>\r\n              </li>*/}\r\n            </ul>\r\n                     {/*   <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n              <input className=\"form-check-input\" onClick ={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>*/}\r\n              <div className=\"btn-group mx-2 my-2\" role=\"group\">\r\n                <button id=\"btnGroupDrop1\" type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  Themes\r\n                </button>\r\n                <ul className=\"dropdown-menu \" aria-labelledby=\"btnGroupDrop1\">\r\n                  <li><button className={`dropdown-item`} onClick = {props.DarkMode} href=\"/\">Dark Mode</button></li>\r\n                  <li><button className={`dropdown-item`} onClick = {props.LightMode} href=\"/\">Light Mode</button></li>\r\n                </ul>\r\n              </div>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"mx-2 form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-secondary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n                    abouttext:PropTypes.string.isRequired};\r\nNavbar.defaultProps = {\r\n    title: \"Textutils\",\r\n    abouttext: \"About Us\"\r\n};\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"Upper case was clicked \"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to Upper case','success')\r\n    }\r\n    const handleloClick = ()=>{\r\n        //console.log(\"lower case was clicked \"+text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to Lower case','success')\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    const handlecopyClick = ()=>{\r\n        let copytext = text;\r\n        navigator.clipboard.writeText(copytext);\r\n        props.showAlert('Successfully Copied to Clipboard!','success')\r\n\r\n    }\r\n    const handleclearClick = ()=>{\r\n            let newText = '';\r\n            setText(newText)\r\n            props.showAlert('Cleared Successfully','success')\r\n\r\n    }\r\n    const handleremovespace = ()=>{\r\n        let newText = text.split(/[  ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('Extra Space removed!!','success')\r\n\r\n    }\r\n    const count = ()=>{\r\n        const split = text.split(\" \");\r\n        const filtered = split.filter((e)=>(e));\r\n        return filtered.length;\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style = {{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\" mb-3\" >\r\n        \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style = {{backgroundColor: props.mode==='light'?'white':'#9aa1a9',color: props.mode==='dark'?'white':'black'}} id=\"mybox\" rows=\"10\"></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} mx-2 my-1`}  onClick={handleUpClick}>Convert to Upper case</button>\r\n        <button disabled={text.length===0} className=  {`btn btn-${props.mode==='light'?'secondary':'dark'} mx-2 my-1`}  onClick={handleloClick}>Convert to Lower case</button>\r\n        <button disabled={text.length===0} className=  {`btn btn-${props.mode==='light'?'secondary':'dark'} mx-2 my-1`}   onClick={handlecopyClick}>Copy to Clipboard</button>\r\n        <button disabled={text.length===0} className=  {`btn btn-${props.mode==='light'?'secondary':'dark'} mx-2 my-1`}   onClick={handleclearClick}>Clear Text</button>\r\n        <button disabled={text.length===0} className=  {`btn btn-${props.mode==='light'?'secondary':'dark'} mx-2 my-1`}   onClick={handleremovespace}>Remove extra Space</button>\r\n        </div>\r\n        <div className=\"container my-3 mx-2 \"style = {{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Summary</h2>\r\n        \r\n            <p>{count()} words and {text.length} Characters</p>\r\n            <p>{0.008*count()} Minutes to read This!!</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capatalize = (word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n  }\r\n    return (\r\n    <div style={{height:'50px'}}>\r\n  {  props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show mx-2`} role=\"alert\">\r\n          <strong>{capatalize(props.alert.type)}</strong> : {props.alert.message}\r\n        </div> } \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert'\n/*import {\n  BrowserRouter as Router,\n  Switch,\n  Route ,\n  Link\n} from \"react-router-dom\";*/\n\n\n function App(){\n   const [mode,setMode] = useState('light');\n   const [alert, setAlert] = useState(null)\n   const showAlert = (message,type)=>{\n     setAlert({\n       message:message,\n       type:type\n     })\n     setTimeout(() => {\n       setAlert(null);\n     }, 1500);\n\n   }\n   const DarkMode = ()=>{\n     setMode('dark');\n     document.body.style.backgroundColor = 'grey'\n     showAlert('Dark Mode Enabled','success')\n    \n        }\n    const LightMode = ()=>{\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light Mode Enabled','success')\n    }\n   \n  \n  \n  return (\n  <>\n  {/*<Router>*/}\n  <Navbar title=\"TextUtility\" abouttext=\"About Us\" mode={mode} DarkMode={DarkMode} LightMode={LightMode}/>\n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n  {/*<Switch>\n          <Route exact path=\"/About\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">*/}\n              <TextForm heading=\"Enter Your Text Here:\" mode={mode} showAlert={showAlert}/>\n        </div>\n        {/*</Router></Route>\n        </Switch>*/}\n  {/*</Router>*/}\n  </>\n  );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}